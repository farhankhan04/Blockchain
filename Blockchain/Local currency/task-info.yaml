type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/BlockchainClient.java
  visible: true
  text: |
    package blockchain;

    import javax.sound.midi.MidiDevice;
    import java.nio.charset.StandardCharsets;
    import java.security.*;
    import java.util.Random;
    import java.util.concurrent.TimeUnit;

    public class BlockchainClient implements Runnable{

        private Blockchain blockchain;
        private String name;
        private final PrivateKey privateKey;
        private final PublicKey publicKey;
        private final KeyPairGenerator keyPairGenerator;

        BlockchainClient(final Blockchain blockchain, final String name) throws NoSuchAlgorithmException{
            this.keyPairGenerator = KeyPairGenerator.getInstance("RSA");
            this.keyPairGenerator.initialize(1024);

            this.blockchain = blockchain;
            this.name = name;
            this.privateKey = this.keyPairGenerator.generateKeyPair().getPrivate();
            this.publicKey = this.keyPairGenerator.generateKeyPair().getPublic();
        }
        @Override
        public void run() {
            Random rd = new Random();
            while (blockchain.getChain().size() < 7){
                try {
                    TimeUnit.MILLISECONDS.sleep(10);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                char[] chars = "abcdefghijklmnopqrstuvwxyz".toCharArray();
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < rd.nextInt(5); i++) {
                    char c = chars[rd.nextInt(chars.length)];
                    sb.append(c);
                }

                int identifier = blockchain.getIdentifierForTransaction();
                String generatedString = sb.toString();
                Signature rsa = null;
                try {
                    rsa = Signature.getInstance("SHA1withRSA");
                    rsa.initSign(this.privateKey);
                    rsa.update(generatedString.getBytes());
                    rsa.update(((Integer)identifier).byteValue());
                    byte[] sign = rsa.sign();
                    final Message msg = new Message(name+": "+ generatedString, identifier, sign, publicKey);
                    blockchain.addMessage(msg);
                } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {
                    e.printStackTrace();
                }
            }
        }
    }
  learner_created: true
- name: src/blockchain/Blockchain.java
  visible: true
  text: |-
    package blockchain;

    import java.nio.charset.StandardCharsets;
    import java.security.*;
    import java.time.Duration;
    import java.time.Instant;
    import java.util.ArrayList;
    import java.util.Comparator;
    import java.util.List;

    public class Blockchain {

        private List<Block> chain;
        private int n = 0;
        private Instant lastBlockCreated;
        private List<Message> messages;
        private int min_identifier = 0;
        private int identifier;
        private List<Message> tempMessages;


        public Blockchain(){
            setChain(new ArrayList<>());
            lastBlockCreated = Instant.now();
            setMessages(new ArrayList<>());
            setTempMessages(new ArrayList<>());
            setIdentifier(0);
        }

        public synchronized void createBlock(int taskNumber, final int id, final long time, final long magicNumber, final String hashOPrevious, final String hash, final List<Message> currentMessages) {

            int size = getChain().size();
            if(getChain().isEmpty() || getChain().get(size-1).getHash().equals(hashOPrevious)){ // to ensure that some other thread hasn't beaten this thread to create the block

                setTempMessages(getMessages());
                setMessages(new ArrayList<>());
                min_identifier = getTempMessages().stream().map(Message::getIdentifier).max(Comparator.naturalOrder()).orElse(min_identifier);
                setIdentifier(min_identifier);
                Block block = new Block();
                getChain().add(block);
                block.setTaskNumber(taskNumber);
                block.setId(id);
                block.setTimestamp(time);
                block.setMagicNumber(magicNumber);
                block.setHash(hash);
                block.setHashOfPrevious(hashOPrevious);
                Instant instant = Instant.now();
                long timelapse = Duration.between(lastBlockCreated, instant).toSeconds();
                lastBlockCreated = instant;
                block.setTimeOfGeneration(String.valueOf(timelapse));
                block.setMessages(currentMessages);
                if(timelapse>60) {
                    setN(getN()-1);
                }
                else if(timelapse<10) {
                    setN(getN()+1);
                }
            }
        }

        public synchronized void addMessage(final Message message){
            if(message.getIdentifier() <= min_identifier)
               return;
            getMessages().add(message);
        }

        public synchronized int getIdentifierForTransaction() {
            setIdentifier(getIdentifier() + 1);
            return getIdentifier();
        }

        public boolean validate() throws NoSuchAlgorithmException, SignatureException, InvalidKeyException {
            int min_identifier = 0;
            for(int i = 1; i < chain.size(); i++){
                Block block = chain.get(i);
                if(!block.getHashOfPrevious().equals(chain.get(i - 1).getHash()))
                    return false;
                min_identifier = chain.get(i-1).getMessages().stream().map(Message::getIdentifier).max(Comparator.naturalOrder()).orElse(min_identifier);
                for(Message message : chain.get(i).getMessages()){
                    if(!validateMessage(message))
                        return false;
                    if(message.getIdentifier() <= min_identifier)
                        return false;
                }
            }
            return true;
        }

        private boolean validateMessage(Message message) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {
            Signature sig = Signature.getInstance("SHA1withRSA");
            sig.initVerify(message.getPublicKey());
            sig.update(message.getText().getBytes(StandardCharsets.UTF_8));
            sig.update(((Integer)message.getIdentifier()).byteValue());
            return sig.verify(message.getSign());
        }

        public String hash(String input) {
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

        public List<Message> getTempMessages() {
            return tempMessages;
        }

        public void setTempMessages(List<Message> tempMessages) {
            this.tempMessages = tempMessages;
        }

        public List<Message> getMessages() {
            return messages;
        }

        public void setMessages(List<Message> messages) {
            this.messages = messages;
        }

        public int getN() {
            return n;
        }

        public void setN(int n) {
            this.n = n;
        }

        public List<Block> getChain() {
            return chain;
        }

        public void setChain(List<Block> chain) {
            this.chain = chain;
        }

        public void setIdentifier(int identifier) {
            this.identifier = identifier;
        }

        public int getIdentifier() {
            return identifier;
        }
    }
  learner_created: true
- name: src/blockchain/BlockchainGenerator.java
  visible: true
  text: |
    package blockchain;

    import java.util.Date;
    import java.util.List;
    import java.util.Random;

    public class BlockchainGenerator implements Runnable{

        private final Blockchain blockchain;
        private final int taskNumber;

        BlockchainGenerator(Blockchain blockchain, int taskNumber){
            this.blockchain = blockchain;
            this.taskNumber = taskNumber;
        }

        @Override
        public void run() {
            Random rd = new Random();
            long magicNumber;
            while (blockchain.getChain().size() < 7) {
                int n = blockchain.getN();
                char[] chars = new char[n];
                for (int i = 0; i < n; i++)
                    chars[i] = '0';
                final String zeros = String.copyValueOf(chars);
                final List<Message> messages = blockchain.getTempMessages();
                String concatenatedMessages = concatenate(messages);
                magicNumber = rd.nextLong();
                long time = new Date().getTime();
                int id = blockchain.getChain().size() + 1;
                String hashOPrevious = "0";
                int size = blockchain.getChain().size();
                if (!blockchain.getChain().isEmpty())
                    hashOPrevious = blockchain.getChain().get(size-1).getHash();
                String hash = blockchain.hash(String.valueOf(id) + time + magicNumber + hashOPrevious + concatenatedMessages);
                if (hash.length() >= n && hash.substring(0, n).equals(zeros)) {
                    blockchain.createBlock(taskNumber, id, time, magicNumber, hashOPrevious, hash, messages);
                }
            }
        }

        private String concatenate(List<Message> messages) {
            StringBuilder sb = new StringBuilder();
            for(Message message: messages){
                sb.append(message.getText());
            }
            return sb.toString();
        }
    }
  learner_created: true
- name: src/blockchain/Block.java
  visible: true
  text: |-
    package blockchain;

    import java.util.List;

    public class Block{
        private int id;
        private long timestamp;
        private String hashOfPrevious;
        private String hash;
        private String timeOfGeneration;
        private long magicNumber;
        private int taskNumber;
        private List<Message> messages;


        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public long getTimestamp() {
            return timestamp;
        }

        public String getTimeOfGeneration() {
            return timeOfGeneration;
        }

        public void setTimeOfGeneration(String timeOfGeneration) {
            this.timeOfGeneration = timeOfGeneration;
        }
        public void setTimestamp(long timestamp) {
            this.timestamp = timestamp;
        }

        public String getHashOfPrevious() {
            return hashOfPrevious;
        }

        public long getMagicNumber() {
            return magicNumber;
        }

        public void setMagicNumber(long magicNumber) {
            this.magicNumber = magicNumber;
        }

        public void setHashOfPrevious(String hashOfPrevious) {
            this.hashOfPrevious = hashOfPrevious;
        }

        public String getHash() {
            return hash;
        }

        public void setHash(String hash) {
            this.hash = hash;
        }


        public int getTaskNumber() {
            return taskNumber;
        }

        public void setTaskNumber(int taskNumber) {
            this.taskNumber = taskNumber;
        }


        public List<Message> getMessages() {
            return messages;
        }

        public void setMessages(List<Message> messages) {
            this.messages = messages;
        }
    }
  learner_created: true
- name: src/blockchain/Message.java
  visible: true
  text: |
    package blockchain;

    import java.security.PublicKey;

    public class Message {

        private String text;

        private int identifier;

        private byte[] sign;

        private PublicKey publicKey;

        public Message(final String text, final int identifier, final byte[] sign, final PublicKey publicKey) {
            this.text = text;
            this.identifier = identifier;
            this.sign = sign;
            this.publicKey = publicKey;
        }

        public String getText() {
            return text;
        }

        public int getIdentifier() {
            return identifier;
        }

        public byte[] getSign() {
            return sign;
        }

        public PublicKey getPublicKey() {
            return publicKey;
        }

    }
  learner_created: true
- name: src/blockchain/BlockchainConstants.java
  visible: true
  learner_created: true
- name: src/blockchain/BlockchainData.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/50/stages/276/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 27 Jun 2021 21:45:03 UTC
record: 6
